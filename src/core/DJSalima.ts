// * DJSalima.ts : It's ‡∏ô‡πâ‡∏≠‡∏ô DJ Salima!

import { Message } from "discord.js";

import ytdl from "ytdl-core";
import * as fs from "fs";

import Logger from "../utils/Logger";
import Voice from "./Voice";
import { trim } from "../utils/String";

const dataLocation = "./data/songs.json";

const „Åô„Åø„Åæ„Åõ„Çìnot‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥ = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏•‡∏á‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ü‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ";

interface Music {
    name: string,
    url: string,
    category: string
}

export default class DJSalima {
    static Musics: Music[];

    static async construct(isReload = false): Promise<void> {
        DJSalima.Musics = [];

        try {
            const buffer = fs.readFileSync(dataLocation);
            const tObject = JSON.parse(buffer.toString());

            for (const category in tObject) {
                for (const music of tObject[category]) {
                    DJSalima.Musics.push({
                        name: music.name,
                        url: music.url,
                        category: category
                    });
                }
            }

            Logger.log(`[FETCH COMPLETE] Retrieved ${DJSalima.Musics.length} Musics from File`, "SUCCESS", isReload);
        }
        catch (err) {
            Logger.log(`Error Importing Music: ${err}`, "ERROR");
        }
    }

    // * This function should only be call when confirmed connection
    static async play(music: Music, musicIndex: number, msg?: Message): Promise<void> {
        try {
            const musicdata = ytdl(music.url, { quality: "highestaudio" });
            Voice.connection?.play(musicdata, { volume: 1 });
            Logger.log(`Playing ${music.name} (#${musicIndex + 1}) to ${Voice.connection?.channel.name}`);

        }
        catch (err) {
            msg?.reply("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏∂‡πâ‡∏ô");
            Logger.log(`Error while playing music from YouTube ${err}`);
        }
    }

    static playSearch(msg: Message): void {
        if (!DJSalima.checkuser(msg))
            return;

        const toSearch = msg.content.toLowerCase().split(" ")[1];

        let index = 0;
        const match: number[] = [];

        for (const music of DJSalima.Musics) {
            if (music.category != "easter_egg" && trim(music.name).includes(toSearch)) {
                match.push(index);
            }
            index++;
        }

        if (match.length == 1) {
            const toPlay = DJSalima.Musics[match[0]];
            DJSalima.play(toPlay, match[0], msg);
            msg.channel.send(`‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô ${toPlay.name}`);
            return;
        }

        if (match.length > 1) {
            let toSend = "‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ";
            for (const index of match) {
                toSend += `\n#${index + 1} => ${DJSalima.Musics[index].name}`;
            }

            msg.channel.send(toSend);
            return;
        }

        msg.reply(„Åô„Åø„Åæ„Åõ„Çìnot‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥);
        Voice.sayTo(msg.member, „Åô„Åø„Åæ„Åõ„Çìnot‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥);
    }

    static playRandomSong(msg: Message): void {
        if (!DJSalima.checkuser(msg))
            return;

        const randIndex: number = Math.floor(Math.random() * DJSalima.Musics.length);

        const toPlay: Music = DJSalima.Musics[randIndex];

        if (toPlay.category == "easter_egg")
            msg.reply(`‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö Easter Egg ü•≥ ${toPlay.name} !!!`);
        else
            msg.reply(`‡∏Ç‡∏≠‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢ ${toPlay.name}`);

        DJSalima.play(toPlay, randIndex, msg);
    }

    private static checkuser(msg: Message): boolean {
        if (!Voice.resolveConnection()) {
            msg.reply("‡∏ô‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏µ‡∏ü‡∏±‡∏á‡∏´‡∏£‡∏≠");
            return false;
        }

        if (msg.member?.voice.channel != Voice.connection?.channel) {
            msg.reply("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô ‡∏°‡∏≤‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô");
            return false;
        }

        return true;
    }
}
