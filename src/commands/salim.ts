import { CocoaVersion } from "cocoa-discord-utils/meta";
import { CogSlashClass, SlashCommand } from "cocoa-discord-utils/slash/class";
import {
    AutoBuilder,
    CocoaOption,
    Ephemeral,
    getEphemeral,
    getStatusFields,
} from "cocoa-discord-utils/template";

import { CommandInteraction } from "discord.js";

import fs from "fs/promises";
import { FrameWorkVersion } from "s-bot-framework";

import { Actions } from "../actions";
import { combinedQuotes, localquotes, sclient } from "../legacy";
import { getUser, updateUserCredit } from "../prisma";

import { style } from "./styles";

function trim(str: string) {
    return str.replace(/\s/g, "").toLowerCase();
}

function lim(str: string, len = 256) {
    return str.length > len ? str.slice(0, len - 3) + "..." : str;
}

export default class Salim extends CogSlashClass {
    constructor() {
        super("Salim Cog", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÜ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°");
    }

    @SlashCommand(
        AutoBuilder("‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°").addBooleanOption(Ephemeral())
    )
    async status(ctx: CommandInteraction) {
        const ephemeral = getEphemeral(ctx);

        const emb = style
            .use(ctx)
            .setTitle("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°")
            .setDescription(
                `‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${process.env.npm_package_version}
‡∏™‡∏•‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${FrameWorkVersion}
‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏•‡∏¥‡∏ï‡∏µ‡πâ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${CocoaVersion}`
            )
            .addFields(await getStatusFields(ctx));

        await ctx.reply({ embeds: [emb.toJSON()], ephemeral });
    }

    @SlashCommand(
        AutoBuilder("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏Ñ‡∏∏ ‡∏ì ‡∏† ‡∏≤ ‡∏û ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á").addStringOption(
            CocoaOption("quote", "‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏Ñ‡∏∏ ‡∏ì ‡∏† ‡∏≤ ‡∏û ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á", true)
        )
    )
    async train(ctx: CommandInteraction) {
        await ctx.deferReply();

        const quote = ctx.options.getString("quote", true);

        const morequotes = { ‡∏ß‡∏≤‡∏ó‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏•‡∏¥‡πà‡∏°: localquotes.getData() };

        if (combinedQuotes.getData().includes(quote)) {
            await ctx.followUp(
                "‡∏ã‡πâ‡∏≥‡∏Ñ‡∏£‡∏±‡∏ö ‡∏´‡∏±‡∏î‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö‡πÑ‡∏õ‡πÑ‡∏î‡πâ"
            );
            await updateUserCredit(ctx.user.id, Actions.DuplicateTrain);
            return;
        }

        morequotes.‡∏ß‡∏≤‡∏ó‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏•‡∏¥‡πà‡∏°.push(quote);

        await fs.writeFile(
            "data/morequotes.json",
            JSON.stringify(morequotes, null, 4)
        );

        await ctx.followUp("‡∏Å‡∏£‡∏∞‡∏ú‡∏°‡∏ô‡πâ‡∏≠‡∏ô‡∏™‡∏•‡∏¥‡πà‡∏°‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡∏ö");
        await updateUserCredit(ctx.user.id, Actions.TrainQuote);

        await localquotes.loadData();
    }

    @SlashCommand(
        AutoBuilder("‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏î‡∏±‡∏ä‡∏ô‡∏µ").addIntegerOption(
            CocoaOption("index", "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", true)
        )
    )
    async getquote(ctx: CommandInteraction) {
        const index = ctx.options.getInteger("index", true);
        const quote = combinedQuotes.getData()[index - 1];

        if (!quote) {
            const r = "‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞ ‡∏´‡∏±‡∏î‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏á ‡∏≠‡∏µ‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö";
            sclient.corgiSwiftJutsu(ctx, r);
            await ctx.reply(r);
            return;
        }

        sclient.corgiSwiftJutsu(ctx, quote);
        await ctx.reply(`${quote} [${combinedQuotes.getRefIndex(index - 1)}]`);
    }

    @SlashCommand(
        AutoBuilder("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û")
            .addStringOption(CocoaOption("query", "‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", true))
            .addBooleanOption(Ephemeral())
    )
    async searchquote(ctx: CommandInteraction) {
        const ephemeral = getEphemeral(ctx);
        const query = ctx.options.getString("query", true);

        const results = Object.entries(combinedQuotes.getData()).filter((q) =>
            trim(q[1]).includes(trim(query))
        );

        let description = "";

        const limit = 700;
        let progressed = 0;
        for (const [i, q] of results.slice(0, 10)) {
            progressed++;
            description += `üí≠ ${lim(q).replaceAll(
                "*",
                "\\*"
            )} **[${combinedQuotes.getRefIndex(+i)}]**\n`;
            if (description.length > limit) break;
        }

        if (!description) {
            description = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤";
        }

        if (results.length > progressed) {
            description += `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏°‡∏µ‡∏≠‡∏µ‡∏Å ${
                results.length - progressed
            } ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö`;
        }

        const emb = style
            .use(ctx)
            .setTitle(`‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏™‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏à‡πã‡∏á‡πÜ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${query}`)
            .setDescription(description)
            .addFields([
                {
                    name: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
                    value: "[‡∏ß‡∏≤‡∏£‡πå‡∏õ](https://watasalim.vercel.app/)",
                    inline: true,
                },
            ]);

        await ctx.reply({ embeds: [emb.toJSON()], ephemeral });
    }

    formatTime(ms_timestamp: number) {
        const t = Math.round(ms_timestamp / 1000);

        return `<t:${t}> (<t:${t}:R>)`;
    }

    socialCredit(score: number) {
        if (score < 0) {
            return "‡∏Å‡∏ö‡∏é‡∏ó‡∏£‡∏£‡∏≤‡∏ä";
        } else if (score < 500) {
            return "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ä‡∏±‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á";
        } else if (score < 900) {
            return "‡∏û‡∏ß‡∏Å‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö‡∏ä‡∏±‡∏á‡∏ä‡∏≤‡∏ï‡∏¥";
        } else if (score < 1100) {
            return "‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ";
        } else if (score < 1500) {
            return "‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏®‡∏£‡∏±‡∏ó‡∏ò‡∏≤‡∏ï‡πà‡∏≠‡∏û‡πà‡∏≠‡∏´‡∏•‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô";
        } else if (score < 2000) {
            return "‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏á‡∏£‡∏±‡∏Å‡∏†‡∏±‡∏Å‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏û‡πà‡∏≠‡∏´‡∏•‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô";
        } else {
            return "‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö ‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î‡∏ó‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏û‡∏£‡∏∞";
        }
    }

    @SlashCommand(
        AutoBuilder("‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ä‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢").addUserOption(
            CocoaOption(
                "user",
                "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á"
            )
        )
    )
    async citizenstatus(ctx: CommandInteraction) {
        const user = ctx.options.getUser("user") ?? ctx.user;

        const gmember = ctx.guild?.members.cache.get(user.id);

        const puser = await getUser(user.id);

        const emb = style
            .use(ctx)
            .setTitle("‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ä‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢")
            .setDescription("‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏û‡∏§‡∏ï‡∏¥")
            .setThumbnail(
                user.avatarURL() ??
                    "https://cdn.discordapp.com/embed/avatars/1.png"
            )
            .addInlineFields(
                {
                    name: "‡∏ä‡∏∑‡πà‡∏≠",
                    value: `<@${user.id}>`,
                },
                {
                    name: "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î",
                    value: this.formatTime(user.createdTimestamp),
                },
                {
                    name: "‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
                    value: gmember?.joinedTimestamp
                        ? this.formatTime(gmember.joinedTimestamp)
                        : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏ñ‡∏∑‡πà‡∏≠‡∏ô",
                },
                {
                    name: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°",
                    value: `${Math.round(puser.socialCredit)} ‡πÅ‡∏ï‡πâ‡∏°`,
                },
                {
                    name: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
                    value: this.socialCredit(puser.socialCredit),
                }
            );

        await ctx.reply({ embeds: [emb.toJSON()] });
    }
}
