import { CocoaVersion } from "cocoa-discord-utils/meta";
import { CogSlashClass, SlashCommand } from "cocoa-discord-utils/slash/class";
import {
    AutoBuilder,
    CocoaOption,
    Ephemeral,
    getEphemeral,
    getStatusFields,
} from "cocoa-discord-utils/template";

import { CommandInteraction } from "discord.js";

import chalk from "chalk";
import fs from "fs/promises";
import { FrameWorkVersion } from "s-bot-framework";

import { combinedQuotes, sclient } from "../legacy";

import { style } from "./styles";

function trim(str: string) {
    return str.replace(/\s/g, "").toLowerCase();
}

function lim(str: string, len = 256) {
    return str.length > len ? str.slice(0, len - 3) + "..." : str;
}

export default class Salim extends CogSlashClass {
    constructor() {
        super("Salim Cog", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÜ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°");
    }

    @SlashCommand(
        AutoBuilder("‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°").addBooleanOption(Ephemeral())
    )
    async status(ctx: CommandInteraction) {
        const ephemeral = getEphemeral(ctx);

        const emb = style
            .use(ctx)
            .setTitle("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°")
            .setDescription(
                `‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${process.env.npm_package_version}
‡∏™‡∏•‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${FrameWorkVersion}
‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏•‡∏¥‡∏ï‡∏µ‡πâ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${CocoaVersion}`
            )
            .addFields(...(await getStatusFields(ctx)));

        await ctx.reply({ embeds: [emb], ephemeral });
    }

    @SlashCommand(
        AutoBuilder("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏Ñ‡∏∏ ‡∏ì ‡∏† ‡∏≤ ‡∏û ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á").addStringOption(
            CocoaOption("quote", "‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏Ñ‡∏∏ ‡∏ì ‡∏† ‡∏≤ ‡∏û ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á")
        )
    )
    async train(ctx: CommandInteraction) {
        await ctx.deferReply();

        const quote = ctx.options.getString("quote", true);

        let morequotes = {} as { ‡∏ß‡∏≤‡∏ó‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏•‡∏¥‡πà‡∏°: string[] };
        try {
            morequotes = JSON.parse(
                (await fs.readFile("data/morequotes.json")).toString()
            );
        } catch (e) {
            console.log(chalk.yellow("[INFO] morequotes is initialized"));
            morequotes = { ‡∏ß‡∏≤‡∏ó‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏•‡∏¥‡πà‡∏°: [] };
        }

        if (morequotes.‡∏ß‡∏≤‡∏ó‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏•‡∏¥‡πà‡∏°.includes(quote)) {
            await ctx.followUp(
                "‡∏ã‡πâ‡∏≥‡∏Ñ‡∏£‡∏±‡∏ö ‡∏´‡∏±‡∏î‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö‡πÑ‡∏õ‡πÑ‡∏î‡πâ"
            );
            return;
        }

        morequotes.‡∏ß‡∏≤‡∏ó‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏•‡∏¥‡πà‡∏°.push(quote);

        await fs.writeFile(
            "data/morequotes.json",
            JSON.stringify(morequotes, null, 4)
        );

        await ctx.followUp(
            "‡∏Å‡∏£‡∏∞‡∏ú‡∏°‡∏ô‡πâ‡∏≠‡∏ô‡∏™‡∏•‡∏¥‡πà‡∏°‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ù‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢"
        );
    }

    @SlashCommand(
        AutoBuilder("‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏î‡∏±‡∏ä‡∏ô‡∏µ").addIntegerOption(
            CocoaOption("index", "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", true)
        )
    )
    async getquote(ctx: CommandInteraction) {
        const index = ctx.options.getInteger("index", true);
        const quote = combinedQuotes.getData()[index - 1];

        if (!quote) {
            const r = "‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞ ‡∏´‡∏±‡∏î‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏á ‡∏≠‡∏µ‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö";
            sclient.corgiSwiftJutsu(ctx, r);
            await ctx.reply(r);
            return;
        }

        sclient.corgiSwiftJutsu(ctx, quote);
        await ctx.reply(`${quote} [${combinedQuotes.getRefIndex(index)}]`);
    }

    @SlashCommand(
        AutoBuilder("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û")
            .addStringOption(CocoaOption("query", "‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", true))
            .addBooleanOption(Ephemeral())
    )
    async searchquote(ctx: CommandInteraction) {
        const ephemeral = getEphemeral(ctx);
        const query = ctx.options.getString("query", true);

        const results = Object.entries(combinedQuotes.getData()).filter((q) =>
            trim(q[1]).includes(trim(query))
        );

        let description = "";

        const limit = 700;
        let progressed = 0;
        for (const [i, q] of results.slice(0, 10)) {
            progressed++;
            description += `üí≠ ${lim(q).replaceAll(
                "*",
                "\\*"
            )} **[${combinedQuotes.getRefIndex(+i)}]**\n`;
            if (description.length > limit) break;
        }

        if (!description) {
            description = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤";
        }

        if (results.length > progressed) {
            description += `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏°‡∏µ‡∏≠‡∏µ‡∏Å ${
                results.length - progressed
            } ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö`;
        }

        const emb = style
            .use(ctx)
            .setTitle("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏™‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏à‡πã‡∏á‡πÜ")
            .setDescription(description)
            .addFields({
                name: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
                value: "[‡∏ß‡∏≤‡∏£‡πå‡∏õ](https://watasalim.vercel.app/)",
                inline: true,
            });

        await ctx.reply({ embeds: [emb], ephemeral });
    }
}
